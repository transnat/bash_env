#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         DATE
# Description:
'''
The description of the script goes here.
'''

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, RootLogger, FileHandler, Formatter, StreamHandler
from pathlib import Path
from typing import Optional

setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(description='The description of the script goes here.')

    parser.add_argument(                                                    # Optional path for the output log file.
        '--logfile', '-F',
        dest='logfile',
        type=Path,
        help='Absolute path to write the logfile to.'
    )
    parser.add_argument(                                                    # Enable DEBUG logging.
        '--verbose', '-v',
        dest='log_level',
        action='count',
        default=30,
        help='Set log level to DEBUG. Defaults to INFO.'
    )

    args = parser.parse_args()                                              # Parse arguments.
    log_level = 50 - args.log_level * 10                                    # Set log numeric value from -vvv args.
    args.log_level = log_level if log_level >= 10 else 10                   # Log level should be <= 10.

    return args


def enable_logging(
    log_level: int = 30,
    log_file_path: Optional[Path] = None
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level (10-50).
        :param log_file:    User-specified path to write log file.
    '''
    formatter = Formatter(                                                  # Log header.
        '%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s] %(message)s'
    )
    log_console = StreamHandler()                                           # Log to screen.
    root_logger = getLogger()                                               # Root logger class.

    log_console.setFormatter(formatter)                                     # No format header for console log.
    root_logger.addHandler(log_console)                                     # Add console to root logger.
    root_logger.setLevel(args.log_level)                                    # User-specified log_level.

    if log_file_path:
        log_file = FileHandler(log_file_path)                               # Log to file.

        log_file.setFormatter(formatter)                                    # Verbose format header for logfile.
        root_logger.addHandler(log_file)                                    # Add logfile to root logger.

    return root_logger


if __name__ == '__main__':
    args = get_arguments()
    log = enable_logging(args.log_level, args.log_file)
