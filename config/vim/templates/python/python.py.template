#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Date: DATE
# Description:
'''The description of the script goes here.'''

__author__ = 'Casey Sparks'

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, FileHandler, Formatter, RootLogger, StreamHandler
from pathlib import Path
from typing import Optional

setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.

ARGS = get_arguments()                                                      # Get commandline arguments.
LOG = enable_log(ARGS.log_level, ARGS.log_file)                             # Instantiate logger.


def get_arguments() -> Namespace:
    '''Get cmdline arguments and enable logging.'''
    parser = ArgumentParser(                                                # Instantiate argument parser.
        description='The description of the script goes here.'
    )

    parser.add_argument(                                                    # Set log level.
        '--verbose', '-v',
        dest='log_level',
        action='count',
        default=0,
        help='Increase logging verbosity. Default CRITICAL.'
    )
    parser.add_argument(                                                    # Set path for the output log file.
        '--logfile', '-l',
        dest='log_file',
        type=Path,
        default=None,
        help='Absolute path to write the logfile to.'
    )
    parser.add_argument(                                                    # Set logging verbosity.
        '--verbose', '-v',
        dest='log_level',
        action='count',
        default=0,
        help='Increase logging verbosity. Default NOTSET.'
    )

    arguments = parser.parse_args()                                         # Parse arguments.
    arguments.log_level = max(                                              # Set log level.
        50 - arguments.log_level * 10,                                      # Max CRITICAL.
        10                                                                  # Not less than DEBUG.
    )

    return arguments


def enable_log(
    log_level: int = 30,                                                    # Default INFO.
    log_file_path: Optional[Path] = None
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level (10-50).
        :param log_file:    User-specified path to write log file.
    '''
    formatter = Formatter(                                                  # Log header.
          '{asctime} {threadName:12} {levelname:8}: "{message}"',           # Format style.
          style='{'                                                         # Set f-string style formating.
    )
    log_console = StreamHandler()                                           # Logging stream handler.
    log_root = getLogger()                                                  # Root logger class.

    log_console.setFormatter(formatter)                                     # Set log stream format.
    log_root.setLevel(log_level)                                            # User-specified log_level.
    log_root.addHandler(log_console)                                        # Log to screen.

    if log_file_path:                                                       # Logging file handler.
        log_file = FileHandler(log_file_path)

        log_file.setFormatter(formatter)                                    # Set log file format.
        log_root.addHandler(log_file)                                       # Log to file.

    return log_root

if __name__ == '__main__':
    pass
