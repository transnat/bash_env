#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Name:         clock
# Author:       Casey Sparks
# Date:         January 25, 2022
# Description:
'''A simple CLI clock.'''

from argparse import Namespace, ArgumentParser
from datetime import datetime
from locale import setlocale, LC_ALL
from os import system
from sys import exit as sys_exit
from time import sleep
from pytz import utc


setlocale(LC_ALL, 'en_US.UTF-8')


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                                # Instantiate argument parser.

    parser.add_argument(                                                        # -12
        '-12',
        action='store_true',
        dest='twelve',
        help='Set format to 12hr time.'
        )
    parser.add_argument(                                                        # -12
        '-u', '--utc',
        dest='utc',
        nargs='?',
        type=str,
        help='Convert %H%m time string to UTC and exit. Default: [now].'
        )

    arguments = parser.parse_args()
    arguments.utc = datetime.now().strftime('%H%m') if arguments.utc is None else arguments.utc

    return arguments


def get_utc_time(
    input_time: str = datetime.now().strftime('%H%m')
        ) -> str:
    '''
    Continuously display a text-based clock.
        :param input_time:  Current time string (%H%M).
        :return:            UTC time string (%H%M).
    '''
    assert isinstance(input_time, (str, type(None))), ':param input_time: must be instance of str() or Nonetype.'
    assert input_time.isdigit(), ':param input_time: must be time string or None.'
    assert 0 <= int(input_time[:2]) < 24 and 0 <= int(input_time[2:4]) < 60, ':param input_time: invalid time.'

    return datetime.strptime(input_time, '%H%M').astimezone(utc).strftime('%H%M')


def run_clock(
    twelve_hour: bool = False,
        ) -> None:
    '''
    Continuously display a text-based clock.
        :param twelve_hour: Boolean indicating if clock should show twelve-hour time.
    '''
    assert isinstance(twelve_hour, bool), ':param twelve_hour: must be instance of bool().'

    div = '=' * len((time_string := '%I:%M:%S %p' if twelve_hour else '%H:%M:%S'))

    while True:
        try:
            system('clear')                                                     # Clear screen.
            print(f'{div}\n{datetime.now().strftime(time_string)}\n{div}')      # Print clock.
            sleep(1)                                                            # Sleep one second.

        except KeyboardInterrupt:                                               # Exit without stack trace.
            print()
            sys_exit(1)


if __name__ == '__main__':
    args = get_arguments()

    if args.utc:
        print(get_utc_time(args.utc))
    else:
        run_clock(args.twelve)
