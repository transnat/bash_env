#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         May 12, 2023
# Description:
'''Read QR codes from the screen.'''

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, FileHandler, Formatter, StreamHandler
from pathlib import Path
from tempfile import NamedTemporaryFile
from PIL import ImageGrab
from cv2 import QRCodeDetector, imread

setlocale(LC_ALL, 'en_US.UTF-8')                                                # Set locale.

LOG = getLogger(__name__)


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
        '''
    parser = ArgumentParser(description=__doc__)                                # Instantiate argument parser.

    parser.add_argument(                                                        # --logfile
        '--logfile', '-l',
        dest='log_file',
        type=Path,
        default=None,
        help='Absolute path to write the logfile to. Default `None`.',
        )
    parser.add_argument(                                                        # --verbose
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `CRITICAL`.',
        )

    arguments = parser.parse_args()
    arguments.log_level = [30, 20, 10, 0][min(arguments.log_level, 3)]          # Magic.

    return arguments


def enable_log(
    log_level: int = 30,                                                        # WARNING.
    log_file: (Path, None) = None
        ) -> None:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default NOTSET.
        :param log_file:    User-specified path to write log file. Default None.
        '''
    assert isinstance(log_level, int), ':param log_level: must be instance of int().'
    assert log_level >= 0, ':param log_level: must be >=0.'

    formatter = Formatter(                                                      # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{',
        )
    log_console = StreamHandler()                                               # Log to screen.

    log_console.setFormatter(formatter)                                         # Set log stream format.
    LOG.addHandler(log_console)                                                 # Log to screen.
    LOG.setLevel(log_level)                                                     # User-specified log_level.

    if log_file:                                                                # Log to file.
        assert isinstance(log_file, Path), ':param log_file: must be instance of pathlib.Path() or None.'
        assert log_file.parent.exists(), ':param log_file: parent dir does not exist.'

        log_file = FileHandler(log_file)                                        # Set log file.

        log_file.setFormatter(formatter)                                        # Set log file format.
        LOG.addHandler(log_file)                                                # Log to file.


def take_screenshot() -> Path:
    '''
    Save the entire screen to a temporary PNG file and return the path.
        :return:    Path of the temporary PNG file.
        '''
    with NamedTemporaryFile(mode='w+b', suffix='.png', dir=Path('/tmp'), delete=False) as temp_file:
        screenshot = ImageGrab.grab()                                           # Take screenshot.

        screenshot.save(temp_file.name, 'PNG')                                  # Save screenshot.
        LOG.debug(f'Saved screenshot to {temp_file.name}')

    return Path(temp_file.name)


def read_qr_code_from_file(filename: (Path, str)) -> str:
    '''
    Read a QR code from an image.
        :param filename:    Path to file.
        :return:            Value from QR code.
        '''
    assert isinstance(filename, (Path, str)), '`filename` must be instance of Path() or str().'

    try:
        LOG.debug(f'Reading QR code from {filename}.')

        value, _, _ = QRCodeDetector().detectAndDecode(imread(str(filename)))

        if value == '':
            value = 'No QR data found.'

            LOG.warning(value)

        else:
            LOG.debug(f'QR data found: {value}')

    except BaseException as exc:
        raise exc

    return value


if __name__ == '__main__':
    args = get_arguments()

    enable_log(args.log_level, args.log_file)

    print(read_qr_code_from_file(Path(take_screenshot())))
