#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         November 24, 2022
# Description:
'''
A script to create PGP-encrypted scripts.
Note that decrypted scripts get passed to a bash subshell, so all
non-POSIX files **must** have a shebang in order to be properly
interpreted by bash.

To optionally encrypt the resultant script to yourself automatically:
    * Set $PGP_KEY_ID in your environment, or
    * Set default-recipient to your uid in ~/.gnupg/gpg.conf
'''

from argparse import ArgumentParser, Namespace
from datetime import datetime
from locale import setlocale, LC_ALL
from logging import getLogger, Formatter, StreamHandler
from pathlib import Path
from gnupg import GPG
from psutil import process_iter, AccessDenied, ZombieProcess

setlocale(LC_ALL, 'en_US.UTF-8')                                                # Set locale.

LOG = getLogger(__name__)


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace() instance of user arguments.
        '''
    parser = ArgumentParser(description=__doc__)                                # Instantiate parser.

    parser.add_argument(                                                        # file
        'file',
        type=Path,
        nargs='+',
        help='Specify files to encrypt.',
        )
    parser.add_argument(                                                        # --recipients
        '--recipients', '-r',
        dest='recipients',
        nargs='+',
        default=[],
        help='Specify who can decrypt the file.',
        )
    parser.add_argument(                                                        # --verbose
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `WARNING`.',
        )

    arguments = parser.parse_args()
    arguments.log_level = [30, 20, 10, 0][min(arguments.log_level, 3)]

    return arguments


def enable_log(log_level: int = 30) -> None:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default NOTSET.
        '''
    assert isinstance(log_level, int) and log_level >= 0, '`log_level` must be instance of int() >= 0.'

    formatter = Formatter(                                                      # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{',
        )
    log_console = StreamHandler()                                               # Log to screen.

    log_console.setFormatter(formatter)                                         # Set log stream format.
    LOG.addHandler(log_console)                                                 # Log to screen.
    LOG.setLevel(log_level)                                                     # User-specified log_level.


def prechecks_pass(arguments: Namespace) -> bool:
    '''
    Check that inputs and processes are as expected.
        :param arguments:   User-specified cmdline arguments.
        :return:            Boolean indicating if prechecks have passed.
        '''
    assert isinstance(arguments, Namespace), '`arguments` must be instance of Namespace().'

    for gpg_proc in ('gpg-agent', 'gpgconf'):                                   # Check that a GPG agent is running.
        for proc in process_iter():
            try:
                if gpg_proc in proc.name():
                    LOG.debug(f'Found process {gpg_proc}.')
                    break                                                       # Only process needs to be found.

            except (AccessDenied, ZombieProcess) as err:
                LOG.exception(f'{gpg_proc} not running on host.')
                raise err

        else:
            continue

        break

    for file in arguments.file:                                                 # Check that the input files exist.
        try:
            file.resolve(strict=True)
            LOG.debug(f'Found file {file}.')

        except FileNotFoundError as file_err:
            LOG.exception(f'File {file} not found: {file_err}')

            raise file_err

    return True


def encrypt(
    file: Path,
    recipients: list[str],
        ) -> Path:
    '''
    Decrypt seed phrase and return its value.
        :param file:        The path of the file to be encrypted.
        :param recipients:  The recipient emails of the cipherfile.
        :return:            Path of the resultant cipherfile.
        '''
    assert isinstance(file, Path), '`file` must be instance of Path().'
    assert isinstance(recipients, list), '`recipients` must be instance of list().'
    assert {type(item) for item in recipients} == {str}, '`recipeints` must be list of strings.'

    gpg = GPG(gpgbinary='/usr/bin/gpg2', use_agent=True, verbose=False)         # Instantiate GPG agent class.
    outfile = file.with_suffix('')                                              # Strip suffix, if one exists.

    LOG.debug(f'Encrypting file {file.name} to {outfile.name}')

    try:
        with open(file, 'rb') as infile:
            gpg.encrypt_file(                                                   # Encrypt the file.
                infile,
                recipients=recipients,
                armor=True,                                                     # Output as ASCII text.
                always_trust=True,
                output=outfile
                )

    except BaseException as err:
        LOG.exception('Unhandled exception occured.\nEncryption failed for {file}.')

        raise err

    return outfile


def munge_cipherfile(cipherfile: Path) -> None:
    '''
    Headers and footers to cipherfile needed for shell interpretation.
        :param cipherfile: The path of the file to be encrypted.
        '''
    assert isinstance(cipherfile, Path), '`cipherfile` must be instance of Path().'

    newlines = [                                                                # GSHscript cleartext header.
        '#!/usr/bin/env bash\n',
        '# -*- coding:utf-8 -*-\n',
        '# Author:       Casey Sparks\n',
        f'# Date:         {datetime.now().strftime("%B %d, %Y")}\n',
        '\n',
        'gpg2 --decrypt 2> /dev/null << EOF | bash -s $@\n',
        '\n',
        ]

    with open(cipherfile, 'r', encoding='utf-8') as prefile:
        newlines.extend(prefile.readlines())                                    # Ciphertext.
        newlines.extend('\nEOF\n')                                              # Heredoc delimiter.

    with open(cipherfile, 'w', encoding='utf-8') as postfile:
        postfile.writelines(newlines)                                           # Write header/ciphertext/footer.

    cipherfile.chmod(775)                                                       # Make cipherfile executable.


if __name__ == '__main__':
    args = get_arguments()

    enable_log(args.log_level)

    if prechecks_pass(args):
        for clearfile in args.file:
            munge_cipherfile(encrypt(clearfile, args.recipients))
            print(f'{clearfile} encrypted.\nYou may now delete the original, if it still exists.')
