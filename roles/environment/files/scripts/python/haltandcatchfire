#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         December 14, 2022
# Description:
'''Check an endpoint and wipe local user data. Should be cron on sensitive systems.'''

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, Formatter, StreamHandler
from os import getlogin
from pathlib import Path
from shutil import rmtree
from socket import gethostname
from requests import get


setlocale(LC_ALL, 'en_US.UTF-8')                                                # Set locale.

LOG = getLogger(__name__)


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                                # Instantiate argument parser.

    parser.add_argument(                                                        # --debug
        '--debug',
        dest='debug',
        action='store_true',
        help='Run application in debug mode without performing any action.',
        )
    parser.add_argument(                                                        # --verbose
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `CRITICAL`.',
        )

    arguments = parser.parse_args()
    arguments.log_level = [30, 20, 10, 0][min(arguments.log_level, 3)]          # Magic.

    return arguments


def enable_log(log_level: int = 30) -> None:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default WARNING.
        '''
    assert isinstance(log_level, int) and log_level >= 0, '`log_level` must be instance of int() >= 0.'

    formatter = Formatter(                                                      # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{',
        )
    log_console = StreamHandler()                                               # Log to screen.

    log_console.setFormatter(formatter)                                         # Set log stream format.
    LOG.addHandler(log_console)                                                 # Log to screen.
    LOG.setLevel(log_level)                                                     # User-specified log_level.


def remote_flag() -> bool:
    '''
    Checks remote for hostname match and returns true if true.
        :return:    Boolean for the existence of the remote flag.
        '''
    LOG.info('Checking for remote flag.')

    status_code = get(                                                          # Check if flag exists.
        f'https://raw.githubusercontent.com/caseysparkz/haltandcatchfire/main/{gethostname()}',
        timeout=5
        ).status_code

    match status_code:
        case 200:
            flag = True

            LOG.info('Flag found.')

        case _:
            flag = False

            LOG.info('Flag not found.')

    return flag


def destroy_user_data(debug: bool = True) -> None:
    '''
    Wipe sensitive user data from disk.
        :param debug:   Run steps without taking any action.
        '''
    assert isinstance(debug, bool), '`debug` must be instance of bool().'

    dir_list = [                                                                # List of directories to erase.
        Path.home(),                                                            # Home directory.
        Path(f'/var/spool/cron/{getlogin()}')                                   # User cronjobs.
        ]

    LOG.debug(f'Directory list: {dir_list}')

    for directory in dir_list:
        if debug:                                                               # Log removal ONLY.
            LOG.debug(f'Debug mode. Not removing {directory}')

        else:
            try:                                                                # Remove data.
                rmtree(directory)
                LOG.info(f'Removed {directory}.')

            except OSError as exc:
                LOG.critical(f'Failed to remove {directory}.')

                raise exc


if __name__ == '__main__':
    args = get_arguments()
    enable_log(args.log_level)

    if any([args.debug, remote_flag()]):                                        # Get remote flag or debug mode.
        destroy_user_data(args.debug)
