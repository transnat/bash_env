#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         August 09, 2022
# Description:
'''Convert structured data between HTML, INI, JSON, XML, and YAML.'''

from argparse import ArgumentParser, Namespace
from configparser import ConfigParser
from io import TextIOWrapper
from json import dumps as json_dumps, load as json_load
from locale import setlocale, LC_ALL
from logging import Formatter, RootLogger, StreamHandler, getLogger, WARNING, DEBUG, INFO, NOTSET
from pathlib import Path
from sys import exit as sys_exit, stdout
from dict2xml import dict2xml
from pandas import json_normalize, read_csv
from toml import dumps as toml_dumps, load as toml_load
from xmltodict import parse
from yaml import safe_load, dump as ydump


setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.

SUPPORTED_TYPES = {'csv', 'ini', 'json', 'xml', 'yml'}                      # Supported outfile types.


def get_arguments(
    ) -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                            # Instantiate argument parser.

    parser.add_argument(                                                    # infile
        'infile',
        type=Path,
        help='File to read from.')
    parser.add_argument(                                                    # --output-format
        '--output-format', '-o',
        dest='format',
        choices=SUPPORTED_TYPES,
        default='yml',
        type=str,
        help='Data format to output.')
    parser.add_argument(                                                    # --write
        '--write', '-w',
        dest='write',
        action='store_true',
        help='Write file to disk instead of stdout.')
    parser.add_argument(                                                    # --verbose
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `CRITICAL`.')

    arguments = parser.parse_args()                                         # Parse arguments.

    match arguments.log_level:                                              # Set arguments.log_level.
        case 0:
            arguments.log_level = WARNING
        case 1:
            arguments.log_level = INFO
        case 2:
            arguments.log_level = DEBUG
        case _:
            arguments.log_level = NOTSET

    return arguments


def enable_log(
    log_level: int = WARNING
    ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default WARNING.
        :return:            Instantiated logger.RootLogger instance.
    '''
    assert 50 >= log_level >= 0, '`log_level` must be instance of int() >= 0.'

    formatter = Formatter(                                                  # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{')
    log_root = getLogger()                                                  # Root logger instance.
    log_console = StreamHandler()                                           # Log to screen.

    log_console.setFormatter(formatter)                                     # Set log stream format.
    log_root.addHandler(log_console)                                        # Log to screen.
    log_root.setLevel(log_level)                                            # User-specified log_level.
    log_root.debug(f'Log level set to {log_level}.')

    return log_root


def ingest_data(
    infile: Path
    ) -> dict:
    '''
    Ingests a YAML or JSON object from a file or STDIN.
        :param infile:  The file to ingest data from. Instance of Path().
        :return:        Dictionary containing parsed data.
    '''
    assert isinstance(infile, Path), '`infile` must be instance of Path().'

    with open((infile_suffix := infile.suffix.lower()), 'r', encoding='utf-8') as data:
        log.debug(f'Reading from {infile_suffix} file: {infile.name}')

        match infile_suffix:
            case '.csv':                                                    # CSV.
                payload = read_csv(data, skip_blank_lines=True, encoding='utf-8', index_col=False).to_dict()

            case '.html' | '.xml':                                          # HTML/XML.
                payload = parse(data.read())

            case '.json':                                                   # JSON.
                payload = json_load(data)

            case '.ini':                                                    # INI.
                config = ConfigParser()

                config.read(infile)

                payload = config._sections

            case '.toml':                                                   # TOML
                payload = toml_load(data)

            case '.yaml' | '.yml':                                          # YAML [default].
                payload = safe_load(data)

            case _:
                print('Unsupported filetype. Please check the extension and try again.')
                sys_exit(1)

    log.debug(
        f'Input: {infile}\n',
        f'Input filetype: {infile.suffix.upper().replace(".", "")}\n',
        f'Payload: {payload}\n\n')

    return payload


def output_data(
    payload: dict,
    infile: Path,
    out_format: str = 'yaml',
    write: bool = False
    ) -> None:
    '''
    Formats and outputs a data object as JSON or YAML to a file or STDOUT.
        :param payload:     The Python dict to format and output.
        :param infile:      Path of the input file.
        :param out_format:  Output format of the data. One of ['ini', 'json', 'xml', 'yaml']
        :param write:       Boolean specifying whether data should be written to a file.
    '''
    def _write_out(
        payload: dict,
        out_format: str,
        outfile: TextIOWrapper = stdout
        ) -> None:
        '''
        Write data to a TextIOWrapper.
            :param payload:     The Python dict to format and output.
            :param out_format:  Output format of the data. One of ['ini', 'json', 'xml', 'yaml']
            :param outfile:     TextIOWrapper to write data to. Either an open filehandle, or stdout.
        '''
        assert isinstance(outfile, TextIOWrapper), '`outfile` must be instance of io.TextIOWrapper().'

        log.debug(f'Writing {out_format.upper()} output to {outfile.name}.')

        match out_format.lower():
            case 'csv':                                                     # CSV.
                json_normalize(payload).to_csv(
                    outfile,
                    index=False,
                    encoding='utf-8')

            case 'html' | 'xml':                                            # HTML/XML.
                outfile.write(dict2xml(payload))

            case 'ini':                                                     # INI.
                config = ConfigParser()                                     # Instantiate parser.
                config._sections = payload                                  # Write to class.

                for key in payload.keys():
                    if iter(key):                                           # Keys are nested.
                        log.warning(
                            'Warning! INI does not support nested values.\n'
                            'Values will be flattened to strings.')

                        if input('Proceed? [y/N] ').lower().startswith('n'):
                            log.critical('Exiting.')
                            sys_exit(1)

                        config.write(outfile)

            case 'json':                                                    # JSON.
                outfile.write(json_dumps(payload, indent=2))

            case 'toml':
                outfile.write(toml_dumps(payload))

            case _:                                                         # YAML (default).
                outfile.write(ydump(payload))

    assert isinstance(payload, dict), '`payload` must be instance of dict().'
    assert isinstance(infile, Path), '`infile` must be instance of Path().'
    assert isinstance(out_format, str), '`out_format` must be instance of str().'
    assert isinstance(write, bool), '`write` must be instance of bool().'
    assert out_format in SUPPORTED_TYPES, f'`out_format must be one of {SUPPORTED_TYPES}'

    if write:                                                               # Write to file.
        with open(infile.with_suffix(f'.{out_format}'), 'w', encoding='utf-8') as outfile:
            _write_out(payload, out_format, outfile)
    else:                                                                   # Write to stdout.
        _write_out(payload, out_format, stdout)


if __name__ == '__main__':
    args = get_arguments()
    log = enable_log(args.log_level)

    output_data(
        payload=ingest_data(args.infile),
        infile=args.infile,
        out_format=args.format,
        write=args.write)
