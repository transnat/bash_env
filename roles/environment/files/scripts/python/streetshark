#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Name:         streetshark
# Author:       Casey Sparks
# Date:         May 13, 2022
# Description:
'''Monitor advertised SSIDs and (optionally) find matches.'''

from argparse import ArgumentParser, Namespace
from datetime import datetime
from locale import setlocale, LC_ALL
from logging import getLogger, FileHandler, Formatter, RootLogger, StreamHandler
from os import system
from pathlib import Path
from re import compile as re_compile
from subprocess import run, Popen, PIPE
from time import sleep


setlocale(LC_ALL, 'en_US.UTF-8')                                                # Set locale.


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    Argparse namespace.
    '''
    parser = ArgumentParser(description=__doc__)                                # Instantiate argument parser.
    scan_type = parser.add_mutually_exclusive_group()                           # Specify passive or matched scan.

    parser.add_argument(                                                        # --interface
        '--interface', '-i',
        dest='interface',
        default=get_default_interface(),
        help='Set the wireless interface to scan from.',
        )
    parser.add_argument(                                                        # --interval.
        '--interval', '-n',
        dest='interval',
        type=int,
        default=5,
        help='Set the scan interval (seconds).',
        )
    scan_type.add_argument(                                                     # --match
        '--match', '-m',
        dest='ssids',
        type=str,
        nargs='*',
        help='Specify the SSIDs to catch. Pass no SSIDs to run passively.',
        )
    parser.add_argument(                                                        # --logfile
        '--logfile', '-l',
        dest='log_file',
        type=Path,
        default=None,
        help='Absolute path to write the logfile to. Default `None`.',
        )
    parser.add_argument(                                                        # --verbose
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `WARNING`.',
        )

    arguments = parser.parse_args()
    arguments.log_level = range(30, -1, -10)[min(arguments.log_level, 3)]

    return arguments


def enable_log(
    log_level: int = 30,
    log_file: (Path, None) = None,
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default NOTSET.
        :param log_file:    User-specified path to write log file. Default None.
        :return:            Instantiated logger.RootLogger instance.
    '''
    assert isinstance(log_level, int), '`log_level` must be int.'
    assert log_level >= 0, '`log_level` must be >=0.'

    formatter = Formatter(                                                  # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{'
        )
    log_root = getLogger()                                                  # Root logger instance.
    log_console = StreamHandler()                                           # Log to screen.

    log_console.setFormatter(formatter)                                     # Set log stream format.
    log_root.addHandler(log_console)                                        # Log to screen.
    log_root.setLevel(log_level)                                            # User-specified log_level.

    if log_file:                                                            # Log to file.
        assert isinstance(log_file, Path), '`log_file` must be Path or None.'

        log_file = FileHandler(log_file)                                    # Set log file.

        log_file.setFormatter(formatter)                                    # Set log file format.
        log_root.addHandler(log_file)                                       # Log to file.

    return log_root


def get_default_interface() -> str:
    '''
    Gets the name of the current WAN-connected interface.
        :return:    Name of the default gateway interface.
    '''
    interface = run(
        ['ip', 'route', 'show'],
        capture_output=True,
        check=True
        ).stdout.decode('utf-8').split()[4]

    return interface


def iwlist(
    interface: str = 'wlan0',
        ) -> list:
    '''
    Scans for advertised SSIDs.
        :param interface:   The network interface on which to run the scan.
        :return:            All advertised SSIDs found by `interface`.
    '''
    assert isinstance(interface, str), '`interface` must be instance of str().'

    cells = []                                                              # List of SSIDs.
    cell_number_regex = re_compile(r"^Cell\s+(?P<cellnumber>.+)\s+-\s+Address:\s(?P<mac>.+)$")
    regexps = [
        re_compile(r"^ESSID:\"(?P<essid>.*)\"$"),
        re_compile(r"^Protocol:(?P<protocol>.+)$"),
        re_compile(r"^Mode:(?P<mode>.+)$"),
        re_compile(r"^Frequency:(?P<frequency>[\d.]+) (?P<frequency_units>.+) \(Channel (?P<channel>\d+)\)$"),
        re_compile(r"^Encryption key:(?P<encryption>.+)$"),
        re_compile(
            r"^Quality=(?P<signal_quality>\d+)/(?P<signal_total>\d+)\s+Signal level=(?P<signal_level_dBm>.+) d.+$"
            ),
        re_compile(r"^Signal level=(?P<signal_quality>\d+)/(?P<signal_total>\d+).*$"),
        ]
    wpa_regex = re_compile(r"IE:\ WPA\ Version\ 1$")
    wpa2_regex = re_compile(r"IE:\ IEEE\ 802\.11i/WPA2\ Version\ 1$")

    with Popen(['iwlist', interface, 'scan'], stdout=PIPE, stderr=PIPE) as proc:
        lines = proc.stdout.read().decode('utf-8').split('\n')              # STDOUT.

        log.error(f'STDERR: {proc.stderr.read().decode("utf-8")}')
        log.debug(f'STDOUT: {lines}')

    for line in lines:                                                      # Iterate STDOUT and format to list.
        line = line.strip()
        cell_number = cell_number_regex.search(line)
        wpa = wpa_regex.search(line)
        wpa2 = wpa2_regex.search(line)

        if cell_number:
            log.debug(f'Found cell: {cell_number}.')
            cells.append(cell_number.groupdict())

        if wpa:
            log.debug(f'Found WPA: {wpa}.')
            cells[-1].update({'encryption': 'WPA'})

        if wpa2:
            log.debug(f'Found WPA2: {wpa2}.')
            cells[-1].update({'encryption': 'WPA2'})

        for expression in regexps:
            if (result := expression.search(line)):
                log.debug(f'Found result: {result}.')

                if 'encryption' in result.groupdict():
                    if result.groupdict()['encryption'] == 'on':
                        cells[-1].update({'encryption': 'wep'})

                    else:
                        cells[-1].update({'encryption': 'off'})

                else:
                    cells[-1].update(result.groupdict())
                    log.debug('Cells:\n{cells}')

    return cells


def display_ssids(
    interface: str,
    ssids: (list[str] | None),
    refresh_interval: int = 5,
        ) -> None:
    '''
    Display a list of discovered SSIDS to STDOUT.
       :param interface:        The interface to scan on.
       :param ssids:            SSIDS to look for.
       :param refresh_interval: The interval to refresh the screen on.
    '''
    def _print_dict(
        dictionary: dict,
            ) -> None:
        '''
        Ingest and pretty-print a dictionary to STDOUT.
            :param dictionary:  The dictionary to print.
        '''
        assert isinstance(dictionary, dict), '`dictionary` must be instance of dict().'

        for key, value in dictionary.items():                               # Print ssids/timestamps.
            print(f'{key} {value:>60}')

    assert isinstance(interface, str), '`interface` must be instance of str().'
    assert isinstance(ssids, (list, type(None))), '`ssids` must be instance of list() or None.'
    assert refresh_interval >= 1, '`refresh_interval` must be instance of int() >= 1.'

    system('clear')                                                         # Clear terminal.

    now = datetime.now().strftime('%H:%M:%S')                               # Set timestamp.
    div = 51 * '-'                                                          # Div for pretty formatting.

    for name in [ssid['essid'] for ssid in iwlist(interface)]:              # Grab SSIDs.
        if name not in advertised:                                          # Add found SSID to set.
            advertised.add(name)
            timestamp['advertised'][name] = now

        if ssids and name in ssids:                                         # Add matched SSID to set.
            if name not in matched:
                matched.add(name)
                timestamp['matched'][name] = now

    log.debug(f'Found: {advertised}')
    log.debug(f'Matched: {matched}')
    print(div.replace('-', '='), '\nStreetShark\n', print(div))             # Print header.

    if ssids:                                                               # Print matched SSIDs.
        if len(matched) == 0:
            print('No SSIDs matched yet.')

        else:
            _print_dict(timestamp['matched'])

    elif len(advertised) == 0:                                              # Print found SSIDs.
        print('No SSIDs found yet.')

    else:
        _print_dict(timestamp['advertised'])

    print(div)                                                              # Print footer.
    sleep(refresh_interval)


if __name__ == '__main__':
    args = get_arguments()
    log = enable_log(args.log_level, args.log_file)
    advertised = matched = set()
    timestamp = {'advertised': {}, 'matched': {}}

    while True:
        display_ssids(
            args.interface,
            args.ssids,
            args.interval
            )
