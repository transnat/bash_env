#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         May 03, 2022
# Description:
'''Send a wake-on-LAN packet to the specified MAC/IP addresses.'''

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, Formatter, RootLogger, StreamHandler
from pathlib import Path
from pprint import pp
from socket import socket, AF_INET, SOCK_DGRAM, SOL_SOCKET, SO_BROADCAST
from subprocess import run
from sys import exit as sys_exit, stderr
from typing import NoReturn
from ipaddress import ip_address
from yaml import safe_load

setlocale(LC_ALL, 'en_US.UTF-8')


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                            # Instantiate argument parser.

    parser.add_argument(                                                    # The LAN interface.
        '--interface', '-i',
        dest='interface',
        narguments=1,
        default=Network.get_default_interface(),
        help='Specify the broadcast IP address.'
    )
    parser.add_argument(                                                    # The broadcast IP address.
        '--broadcast', '-b',
        dest='broadcast',
        narguments=1,
        default='255.255.255.255',
        help='Specify the broadcast IP address.'
    )
    parser.add_argument(                                                    # The port to use.
        '--port', '-p',
        dest='port',
        narguments=1,
        default=9,
        help='Specify the port to use.'
    )
    parser.add_argument(                                                    # STDIN-specified MAC addresses.
        '--macs', '-M',
        dest='macs',
        narguments='+',
        help='Specify a list of MAC addresses to send WoL packets to.'
    )
    parser.add_argument(                                                    # STDIN-specified hosts.
        '--hosts', '-H',
        dest='hosts',
        narguments='+',
        help='Specify a list of known hosts to send WoL packets to.'
    )
    parser.add_argument(                                                    # Get application info.
        '--info',
        action='store_true',
        dest='info',
        help='Print the default configuration and exit.'
    )
    parser.add_argument(                                                    # Get application info.
        '--config', '-c',
        dest='config',
        default = Path().home() / '.config/wakeonlan.yml',
        type=Path(),
        help='Path of the config file. Default ~/.config/wakeonlan.yml.'
    )
    parser.add_argument(                                                    # Specify logging verbosity.
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `CRITICAL`.'
    )

    arguments = parser.parse_args()

    if arguments.info:                                                      # Print application info and exit.
        print_info(arguments)
        sys_exit()

    if not arguments.hosts and not arguments.macs:
        parser.print_help(stderr)
        sys_exit()

    arguments.log_level = 50 - min(arguments.log_level, 4) * 10             # Set log level 10 - 50.

    return arguments


def enable_log(
    log_level: int = 0,
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default NOTSET.
        :return:            Instantiated logger.RootLogger instance.
    '''
    assert isinstance(log_level, int), '`log_level` must be int.'
    assert log_level >= 0, '`log_level` must be >=0.'

    formatter = Formatter(                                                  # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{'
    )
    log_root = getLogger()                                                  # Root logger instance.
    log_console = StreamHandler()                                           # Log to screen.

    log_console.setFormatter(formatter)                                     # Set log stream format.
    log_root.addHandler(log_console)                                        # Log to screen.
    log_root.setLevel(log_level)                                            # User-specified log_level.

    return log_root


def print_info(
    arguments: Namespace
        ) -> NoReturn:
    '''
    Print known hosts and configuration.
        :param arguments: User-specified commandline arguments.
    '''
    assert isinstance(arguments, Namespace), '`arguments must be instance of argparse.Namespace().'

    iface_table = [                                                         # Interface information.
        ['Interface', arguments.interface],
        ['Broadcast', arguments.broadcast],
        ['Port', arguments.port]
    ]
    known_hosts = file_checks(arguments.config_file)
    known_hosts = [[k, v] for k, v in known_hosts.items()]                  # Known hosts information.

    print('---------------------------------')                              # Print formatted tables.
    print('Interface Info')
    print('---------------------------------')

    for row in iface_table:
        print(f'{row[0]}:'.ljust(10) + f'{row[1]}'.rjust(23))

    print('\n---------------------------------')
    print('''Known Hosts\n---------------------------------''')

    for row in known_hosts:
        print(f'{row[0]}:'.ljust(10) + f'{row[1]}'.rjust(21))


def file_checks(
    config_file: Path = Path.home() / '.config/wakeonlan.yml'
        ) -> list:
    '''
    Check for config directory/file, and create them if they do not exist.
        :param config_file: Path of the YAML config file.
        :return:            List of known hosts.
    '''
    assert isinstance(config_file, Path), '`config_file` must be instance of pathlib.Path().'

    if not config_file.exists():                                            # Create known hosts file.
        log.debug(f'Creating config file at {config_file}.')
        config_file.touch(mode=0o644, exist_ok=True)

    with safe_load(open(config_file, 'rb', encoding='utf-8')) as file:      # Read hosts file into var.
        known_hosts = file.read()

    return known_hosts


class Network():
    '''Static methods for network manipulation.'''
    @staticmethod
    def get_mac_addresses(
        arguments: Namespace
            ) -> list:
        '''
        Grok stdin and config files for the hosts to wake.
            :param arguments: User-provided cmdline arguments.
        '''
        known_hosts = file_checks(arguments.config_file)                    # Get known hosts from config file.
        mac_addresses = []

        if arguments.macs:                                                  # Set host MACs from STDIN.
            mac_addresses.append(arguments.macs)

        if arguments.hosts:                                                 # Set host MACs from known hosts.
            for host in arguments.hosts:
                try:
                    mac_addresses.append(known_hosts[host])

                except TypeError:
                    log.critical('No known hosts.')

        log.debug(f'MAC addresses: {pp(mac_addresses)}')

        return mac_addresses

    @staticmethod
    def get_default_interface() -> str:
        '''Return the default network interface.'''
        interface = run(                                                    # Capture interface name.
            ['ip', 'route', 'show'],
            capture_output=True,
            check=True
        ).stdout.decode('utf-8').split()[4]

        return interface

    @staticmethod
    def magic_packet(
        mac_address: str
            ) -> bytes:
        '''
        Create a magic packet used to wake a LAN device.
            :param mac_address: The MAC address that should be parsed into a magic packet.
        '''
        log.debug(f'Checking validity of MAC address: {mac_address}')

        if len(mac_address) == 17:                                          # Check/reformat MAC address.
            mac_address = mac_address.replace(mac_address[2], '')

        elif len(mac_address) != 12:
            log.critical(f'Invalid MAC address: {mac_address}')

            raise ValueError('Incorrect MAC address format.')

        return bytes.fromhex('F' * 12 + mac_address * 16)                   # Magic packet.

    @staticmethod
    def send_packet(
        mac_addresses: list,
        broadcast_ip: str,
        port: int,
        interface: str
            ) -> NoReturn:
        '''
        Send a network packet to a socket.
            :param mac_addresses:   The MAC addresses to send the packet to.
            :param broadcast_ip:    The broadcast IP of your subnet.
            :param port:            The port to send the packet to.
            :param interface:       The network interface to bind the socket to.
        '''
        assert isinstance(mac_addresses, list), '`mac_addresses` must be instance of list().'
        assert all(isinstance(item, str) for item in mac_addresses), 'All mac_addresses items must be str().'
        assert isinstance(broadcast_ip, str), '`broadcast_ip` must be instance of str().'
        assert ip_address(broadcast_ip), '`broadcast_ip` not valid.'
        assert isinstance(port, int), '`port` must be instance of int().'
        assert isinstance(interface, str), '`interface` must be instance of str().'

        log.debug('Instantiating socket.')

        with socket(AF_INET, SOCK_DGRAM) as sock:
            log.debug(f'Binding to interface {interface}.')
            sock.bind((interface, 0))
            log.debug('Setting socket options.')
            sock.setsockopt(                                                # Set socket options.
                SOL_SOCKET,
                SO_BROADCAST, 1
            )
            log.debug(f'Created {sock.type.name} socket.')
            log.debug('Connecting to socket.')
            sock.connect((broadcast_ip, port))                              # Connect to socket.
            log.debug('Connected.')

            for mac_address in mac_addresses:                               # Send magic packet.
                sent = sock.send(Network.magic_packet(mac_address))

                log.info(f'Sent: {sent}')


if __name__ == '__main__':
    args = get_arguments()
    log = enable_log(args.log_level)

    Network.send_packet(
        mac_addresses=Network.get_mac_addresses(args),
        broadcast_ip=args.broadcast,
        port=args.port,
        interface=args.interface
    )
