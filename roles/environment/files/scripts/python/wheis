#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Name:         wheis
# Author:       Casey Sparks
# Date:         January 25, 2022
# Description:
'''
whois for IP physical locations.

Uses api.ipstack.com for IP data.
'''

from argparse import ArgumentParser, Namespace
from ipaddress import ip_address
from locale import setlocale, LC_ALL
from os import getenv
from socket import getaddrinfo
from urllib.parse import urlparse
from requests import get
from tabulate import tabulate

setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments(
    ) -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                            # Instantiate argument parser.

    parser.add_argument(                                                    # ip_addresses
        'hosts',
        type=str,
        nargs='+',
        help='List of IP addresses to retrieve.'
        )

    return parser.parse_args()


def dig(
    url: str,
    port: int = 80
        ) -> list[str]:
    '''
    Resolve a URL to a list of IP addresses.
        :param url:     The URL to resolve.
        :param port:    The port to connect to (via socket.getaddreinfo()).
        :return:        A set of resolved IP addresses.
    '''
    assert isinstance(url, str), ':param url: must be instance of str().'
    assert isinstance(port, int), ':param port: must be instance of int().'
    assert 1 <= port <= 2 ** 16, ':param port: is invalid integer.'

    return {t[4][0] for t in getaddrinfo(urlparse(url).netloc or url, port)}


def get_location_table(
    api_key: str,
    ip_addr: str
        ) -> list:
    '''
    Gets location data from IPStack.com and returns it as a list of lists.
        :param api_key:     The IPStack API key for the request.
        :param ip_addr:     The IP address to get location info for.
        :return:            List object containing GeoIP data.
    '''
    assert isinstance(api_key, str), '`api_key` must be str.'
    assert isinstance(ip_addr, str) and ip_address(ip_addr), '`ip_addr` must be valid IP string.'

    ip_info = get(
        f'http://api.ipstack.com/{ip_addr}',
        params={'access_key': api_key},
        timeout=2
        ).json()
    table = [
        ['IP:', ip_info['ip']],
        ['City:', ip_info['city']],
        ['Region:', ip_info['region_name']],
        ['ZIP:', ip_info['zip']],
        ['Country:', ip_info['country_name']],
        ['Coordinates:', f'{ip_info["latitude"]}, {ip_info["longitude"]}']
        ]

    return table


if __name__ == '__main__':
    args = get_arguments()                                                  # Get CLI arguments.
    ip_addresses = set()

    for host in args.hosts:
        try:                                                                # Check if IP is valid.
            ip_address(host)
            ip_addresses.add(host)

        except ValueError:                                                  # Resolve FQDN to IP.
            ip_addresses = ip_addresses.union(dig(host))

    for ip in ip_addresses:
        print(tabulate(get_location_table(                                  # Print IP location data.
            getenv('IPSTACK_API_KEY'),
            ip
            )))
