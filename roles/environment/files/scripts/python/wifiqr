#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         February 08, 2023
# Description:
'''Generate a connection QR code for a wifi SSID.'''

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, StreamHandler, Formatter, RootLogger
from pathlib import Path
from sys import exit as sys_exit
from typing import NoReturn
from qrcode import QRCode

setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                            # Instantiate argument parser.
    mutex_group = parser.add_mutually_exclusive_group()

    parser.add_argument(                                                    # SSID of the wifi network.
        'ssid',
        type=str,
        help='SSID of the wifi network.'
    )
    parser.add_argument(                                                    # Password of the wifi network.
        'passwd',
        type=str,
        help='Password of the wifi network (pass an empty string for no password).'
    )
    parser.add_argument(                                                    # Encryption of the wifi network.
        '--encryption', '-e',
        dest='encryption',
        type=str,
        default='WPA',
        choices=['WPA', 'WEP'],
        help='Encryption used by the SSID (default WPA).'
    )
    parser.add_argument(                                                    # Specify logging verbosity.
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `CRITICAL`.'
    )
    mutex_group.add_argument(                                               # Output connection string.
        '--string-only',
        dest='string',
        action='store_true',
        help='Output the QR wifi connection string and exit.'
    )
    mutex_group.add_argument(                                               # Output file.
        '--output', '-o',
        dest='output',
        type=Path,
        help='Path to write the resultant PNG.'
    )

    arguments = parser.parse_args()                                         # Parse arguments.
    arguments.log_level = 50 - min(arguments.log_level, 4) * 10             # Set log level 10 - 50.

    return arguments


def enable_log(
    log_level: int = 0
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default NOTSET.
        :return:            Instantiated logger.RootLogger instance.
    '''
    assert isinstance(log_level, int), '`log_level` must be int.'
    assert 50 >= log_level >= 0, '`log_level` must be between 0 - 50.'

    formatter = Formatter(                                                  # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{'
    )
    log_root = getLogger()                                                  # Root logger instance.
    log_console = StreamHandler()                                           # Log to screen.

    log_console.setFormatter(formatter)                                     # Set log stream format.
    log_root.addHandler(log_console)                                        # Log to screen.
    log_root.setLevel(log_level)                                            # User-specified log_level.

    return log_root


def generate_qr() -> NoReturn:
    '''Generate a QR and print to stdout or a PNG.'''
    qr_code = QRCode()                                                      # Instantiate QR class.
    qr_str= f'WIFI:T:{args.encryption};S:{args.ssid};P:{args.passwd};;'     # String to be encoded in the QR.

    if args.string:                                                         # Only print the string to stdout.
        print(qr_str)
        sys_exit()

    log.debug(f'Connection string: {qr_str}')
    qr_code.add_data(qr_str)                                                # Add data to the QR class.
    qr_code.make()                                                          # Generate the QR code.
    log.debug('QR code created.')

    if args.output:
        img = qr_code.make_image(fill_color='black', back_color='white')    # Create PNG.

        log.debug(qr_code.print_tty())
        img.save(args.output)                                               # Save PNG to disk.

    else:
        qr_code.print_tty()                                                 # Print to screen.


if __name__ == '__main__':
    args = get_arguments()                                                  # Get cmdline arguments.
    log = enable_log(args.log_level)                                        # Enable logging.

    generate_qr()
