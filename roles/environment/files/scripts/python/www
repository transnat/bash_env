#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         March 20, 2023
# Description:
'''Run a simple local webserver.'''

from argparse import ArgumentParser, Namespace
from http import server
from locale import setlocale, LC_ALL
from logging import getLogger, FileHandler, Formatter, RootLogger, StreamHandler
from pathlib import Path
from socket import socket, AF_INET, SOCK_DGRAM
from socketserver import TCPServer
from sys import exit as sysexit
from typing import NoReturn

setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                            # Instantiate argument parser.

    parser.add_argument(                                                    # Specify HTTP port.
        '--port', '-p',
        dest='port',
        type=int,
        default=8000,
        help='The port to run the webserver on. Default 8000'
    )
    parser.add_argument(                                                    # Set path for the output log file.
        '--logfile', '-l',
        dest='log_file',
        type=Path,
        default=None,
        help='Absolute path to write the logfile to. Default `None`.'
    )
    parser.add_argument(                                                    # Specify logging verbosity.
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `CRITICAL`.'
    )

    arguments = parser.parse_args()                                         # Parse arguments.

    match arguments.log_level:                                              # Set arguments.log_level.
        case 0:
            arguments.log_level = 50                                        # CRITICAL.
        case 1:
            arguments.log_level = 40                                        # ERROR.
        case 2:
            arguments.log_level = 30                                        # WARNING.
        case 3:
            arguments.log_level = 20                                        # INFO
        case 4:
            arguments.log_level = 10                                        # DEBUG.
        case _:
            arguments.log_level = 0                                         # NOTSET.

    return arguments


def enable_log(
    log_level: int = 0,
    log_file: (Path | None) = None
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default NOTSET.
        :param log_file:    User-specified path to write log file. Default None.
        :return:            Instantiated logger.RootLogger instance.
    '''
    assert isinstance(log_level, int), '`log_level` must be int.'
    assert log_level >= 0, '`log_level` must be >=0.'
    assert isinstance(log_file, (Path | None)), '`log_file` must be Path or None.'

    formatter = Formatter(                                                  # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{'
    )
    log_root = getLogger()                                                  # Root logger instance.
    log_console = StreamHandler()                                           # Log to screen.

    log_console.setFormatter(formatter)                                     # Set log stream format.
    log_root.addHandler(log_console)                                        # Log to screen.
    log_root.setLevel(log_level)                                            # User-specified log_level.

    if log_file:                                                            # Log to file.
        log_file = FileHandler(log_file)                                    # Set log file.

        log_file.setFormatter(formatter)                                    # Set log file format.
        log_root.addHandler(log_file)                                       # Log to file.

    return log_root


def run_http_server(
    port: int = 8000
        ) -> NoReturn:
    '''
    Run a simple HTTP server.
        :param port:    The port to run the server on.
    '''
    def _get_lan_ip() -> str:
        '''
        Get the LAN IP address of the host.
            :return:    The LAN IP address of the host.
        '''
        with socket(AF_INET, SOCK_DGRAM) as sock:
            sock.connect(('1.1.1.1', 80))

            return sock.getsockname()[0]

    httpd = TCPServer(('', port), server.SimpleHTTPRequestHandler)

    log.debug(print('Instantiated HTTP server.'))

    try:
        log.info(print(f'HTTP server running on http://{_get_lan_ip()}:{port}'))
        httpd.serve_forever()

    except KeyboardInterrupt:
        log.debug(print('\nCaught keyboard interrupt. Exiting.'))
        sysexit(1)


if __name__ == '__main__':
    args= get_arguments()
    log = enable_log(args.log_level, args.log_file)

    run_http_server(args.port)
