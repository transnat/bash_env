#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         DATE
# Description:
'''SCRIPT DOCSTRING'''

from argparse import ArgumentParser, Namespace
from locale import LC_ALL, setlocale
from logging import getLogger, FileHandler, Formatter, RootLogger, NullHandler, StreamHandler
from pathlib import Path

setlocale(LC_ALL, 'en_US.UTF-8')                                                # Set locale.


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                                # Instantiate argument parser.

    parser.add_argument(                                                        # --logfile
        '-l', '--logfile',
        dest='log_file',
        default=None,
        type=Path,
        help='Absolute path to write the logfile to. Default `None`.',
        )
    parser.add_argument(                                                        # --verbose
        '-v', '--verbose',
        dest='log_level',
        action='count',
        default=0,
        help='Specify logging verbosity. Default `WARNING`.',
        )

    arguments = parser.parse_args()                                             # Parse arguments.
    arguments.log_level = range(0, 40, 10)[min(arguments.log_level, 3)]         # Set log verbosity.

    return arguments


def enable_log(
    log_level: int = 30,
    log_file: (Path, str, None) = None
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default WARNING.
        :param log_file:    User-specified path to write log file. Default None.
        :return:            Instantiated logger.RootLogger instance.
    '''
    assert 50 >= log_level >= 0, ':param log_level: must be instance of int() between 0 and 50 (incl.).'
    assert isinstance(log_file, (Path, str, type(None))), ':param log_file: must be instance of pathlib.Path() or None.'

    root_logger = getLogger()                                                   # Root logger instance.
    handle_stream = StreamHandler()                                             # Log stream handler.
    handle_file = FileHandler(log_file) if log_file else NullHandler            # Log file handler.
    formatter = Formatter(                                                      # Log message format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',                 # Lazy f-string interpolation.
        style='{'
        )

    handle_file.setFormatter(formatter)                                         # Set log file format.
    handle_stream.setFormatter(formatter)                                       # Set log stream format.
    root_logger.addHandler(handle_stream)                                       # Log to screen.
    root_logger.addHandler(handle_file)                                         # Log to file.
    root_logger.setLevel(log_level)                                             # Set log level.

    return root_logger


if __name__ == '__main__':
    args = get_arguments()
    log = enable_log(args.log_level, args.log_file)
