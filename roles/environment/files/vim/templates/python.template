#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:   Casey Sparks
# Date:     DATE
# Description:
'''
MODULE DOCSTRING
'''

from argparse import ArgumentParser, Namespace
from sys import exit as sys_exit
from locale import setlocale, LC_ALL
from logging import getLogger, FileHandler, Formatter, RootLogger, StreamHandler
from pathlib import Path

setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                            # Instantiate argument parser.

    parser.add_argument(                                                    # Set path for the output log file.
        '--logfile', '-l',
        dest='log_file',
        type=Path,
        default=None,
        help='Absolute path to write the logfile to. Default `None`.'
    )
    parser.add_argument(                                                    # Specify logging verbosity.
        '--verbose', '-v',
        dest='log_level',
        action='count',
        default=None,
        help='Specify logging verbosity. Default `CRITICAL`.'
    )

    arguments = parser.parse_args()                                         # Parse arguments.

    if set(arguments.__dict__.values()) == {None}:
        parser.print_help()
        sys_exit(1)

    if arguments.log_level is None:
        arguments.log_level = 30

    arguments.log_level = 50 - min(arguments.log_level, 4) * 10             # Set log level from 10 - 50.

    return arguments


def enable_log(
    log_level: int = 30,
    log_file: (Path, None) = None
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default NOTSET.
        :param log_file:    User-specified path to write log file. Default None.
        :return:            Instantiated logger.RootLogger instance.
    '''
    assert 50 >= log_level >= 0, '`log_level` must be instance of int() between 0 and 50 (incl.).'
    assert isinstance(log_file, (Path, None)), '`log_file` must be Path or None.'

    formatter = Formatter(                                                  # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{'                                                           # Lazy string interpolation.
    )
    log_root = getLogger()                                                  # Root logger instance.
    log_console = StreamHandler()                                           # Log to screen.

    log_console.setFormatter(formatter)                                     # Set log stream format.
    log_root.addHandler(log_console)                                        # Log to screen.
    log_root.setLevel(log_level)                                            # User-specified log_level.

    if log_file:                                                            # Log to file.
        log_file = FileHandler(log_file)                                    # Set log file.

        log_file.setFormatter(formatter)                                    # Set log file format.
        log_root.addHandler(log_file)                                       # Log to file.

    return log_root


if __name__ == '__main__':
    args = get_arguments()
    log = enable_log(args.log_level, args.log_file)

    log.debug(args)
