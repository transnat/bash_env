#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Date: March 10, 2023
# Description:
'''Parse IPv4 and IPv6 addresses between CIDR and netmask.'''

__author__ = 'Casey Sparks'

from argparse import ArgumentParser, Namespace
from ipaddress import ip_network, IPv6Network
from locale import setlocale, LC_ALL
from typing import NoReturn

setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    User-provided commandline arguments.
    '''
    parser = ArgumentParser(description=__doc__)                            # Instantiate argument parser.

    parser.add_argument(                                                    # Addresses/netmasks to process.
        'network',
        type=str,
        help='Subnet to parse, like `192.168.0.1/16`, `10.0.0.1/255.0.0.0`, or `::1`.'
    )

    return parser.parse_args()


def print_table(
    network: str
        ) -> NoReturn:
    '''
    Create and print a network table.
        :param network: The network string to print (like 10.10.10.10/24).
    '''
    if network.split('/')[0].endswith('.0'):
        host_addr = 'None'
    else:
        host_addr = network.split('/')[0]

    subnet = ip_network(network, strict=False)
    div = 34 * '='                                                          # Div length for IPv4 addresses.
    r_pad = 16                                                              # Right padding for IPv4 addresses.
    netmask = 'Netmask'

    if isinstance(subnet, IPv6Network):                                     # Increase div, padding for IPv6 addresses.
        div += 24 * '='
        r_pad += 24
        netmask = 'Prefix'                                                  # IPv6 terminology.

    table = [
        [div, ''],
        [network, ''],
        [div.replace('=', '-'), ''],
        ['Host Address', f'{host_addr}'],
        ['Network Address', f'{subnet.network_address}'],
        ['Broadcast Address', f'{subnet.broadcast_address}'],
        ['Hostmask', f'{subnet.hostmask}'],
        [netmask, f'{subnet.netmask}'],
        [f'CIDR {netmask}', f'/{subnet.prefixlen}'],
        ['Version', f'IPv{subnet.version}'],
        ['Private', f'{subnet.is_private}'],
        ['Reserved', f'{subnet.is_reserved}'],
        ['First IP', f'{subnet[0]}'],
        ['Last IP', f'{subnet[-1]}'],
        [div.replace('=', '-'), ''],
        ['Total Addresses', f'{subnet.num_addresses:,}'],
        [div, '']
    ]

    for heading, data in table:                                             # Print table.
        print(f'{heading:<18}{data:>{r_pad}}')


if __name__ == '__main__':
    args = get_arguments()

    print_table(args.network)
