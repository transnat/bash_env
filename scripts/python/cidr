#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Date:         March 10, 2023
# Description:
'''Print a network table when given a subnet.'''
__author__ = 'Casey Sparks'

from argparse import ArgumentParser, Namespace
from ipaddress import ip_network
from locale import setlocale, LC_ALL
from tabulate import tabulate

setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(                                                # Instantiate argument parser.
        description='Parse IPv4 and IPv6 addresses between CIDR and netmask.'
    )

    parser.add_argument(                                                    # Addresses/netmasks to process.
        'network',
        type=str,
        help='Subnet to parse, like `192.168.0.1/16`, `10.0.0.1/255.0.0.0`, or `::1`.'
    )
    parser.add_argument(                                                    # Set logging verbosity.
        '--verbose', '-v',
        dest='log_level',
        action='count',
        default=0,                                                          # Default NOTSET.
        help='Set log level to DEBUG. Defaults to INFO.'
    )

    arguments = parser.parse_args()                                         # Parse arguments.
    arguments.log_level = max(50 - arguments.log_level * 10, 10)            # Log level should be <=50,>=10.

    return arguments


if __name__ == '__main__':
    args = get_arguments()
    subnet = ip_network(args.network, strict=False)
    host_addr = args.network.split('/')[0]
    table = [                                                               # Subnet info table.
        ['Host Address', host_addr if host_addr[-1] != '0' else 'N/A'],     # Only set if host bits set.
        ['Network Address', subnet.network_address],
        ['Broadcast_address', subnet.broadcast_address],
        ['Hostmask', subnet.hostmask],
        ['Netmask', subnet.netmask],
        ['CIDR Netmask', f'/{subnet.prefixlen}'],
        ['Version', f'IPv{subnet.version}'],
        ['Private', subnet.is_private],
        ['Reserved', subnet.is_reserved],
        ['Total Addresses', f'{subnet.num_addresses:,}']
    ]

    print(tabulate(table, ['Network', args.network], 'fancy_grid'))
