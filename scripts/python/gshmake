#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Date:         November 24, 2022
# Description:
'''
A script to create PGP-encrypted scripts.
Note that decrypted scripts get passed to a bash subshell, so all
non-POSIX files **must** have a shebang in order to be properly
interpreted by bash.

To encrypt the resultant script to yourself:
    * Optionally set $PGP_KEY_ID in your environment, or
    * Set default-recipient to your uid in ~/.gnupg/gpg.conf

Requirements:
    * PyGnuPG
'''

__author__ = 'Casey Sparks'

from argparse import ArgumentParser, Namespace
from datetime import datetime
from locale import setlocale, LC_ALL
from logging import getLogger, Formatter, RootLogger, StreamHandler, DEBUG, INFO
from pathlib import Path
from typing import NoReturn
from gnupg import GPG
from psutil import process_iter, NoSuchProcess, AccessDenied, ZombieProcess

log = getLogger()                                                           # Instantiate logger.

log.addHandler(StreamHandler())                                             # Log to screen.
setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(                                                # Instantiate parser.
        description='Create executable and arbitrary PGP-encrypted scripts.'
    )

    parser.add_argument(                                                    # Specify input files.
        '--inputs', '-i',
        dest='file',
        type=Path,
        nargs='+',
        help='Specify files to encrypt.'
    )
    parser.add_argument(                                                    # Specify recipients.
        '--recipients', '-r',
        dest='recipients',
        nargs='+',
        default=[],
        help='Specify who can decrypt the file.'
    )
    parser.add_argument(                                                    # Enable DEBUG logging.
        '--verbose', '-v',
        action='store_const',
        dest='loglevel',
        const=DEBUG,
        default=INFO,
        help='Set log level to DEBUG.'
    )

    return parser.parse_args()


def enable_logging(
    log_level: int = 30                                                     # Default INFO.
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level (10-50).
    '''
    formatter = Formatter(                                                  # Log header.
          '{asctime} {threadName:12} {levelname:8}: "{message}"',           # Format style.
          style='{'                                                         # Set f-string style        formating.
    )
    handler = StreamHandler()                                               # Logging stream handler.
    logger = getLogger()                                                    # Root logger class.

    handler.setFormatter(formatter)                                         # Set log stream format.
    logger.setLevel(log_level)                                              # User-specified log_level.
    logger.addHandler(handler)                                              # Log to screen.

    return logger


def prechecks_pass(
    arguments: Namespace
        ) -> bool:
    '''
    Check that inputs and processes are as expected.
        :param arguments: User-specified cmdline arguments.
    '''
    for gpg_proc in ['gpg-agent', 'gpgconf']:                               # Check that a GPG agent is running.
        for proc in process_iter():
            try:
                if gpg_proc in proc.name():
                    log.debug(f'Found process {gpg_proc}.')

            except (NoSuchProcess, AccessDenied, ZombieProcess) as err:
                log.exception(f'{gpg_proc} not running on host.')
                raise err

    for file in arguments.file:                                             # Check that the input files exist.
        try:
            file.resolve(strict=True)
            log.debug(f'Found file {file}.')

        except FileNotFoundError as file_err:
            log.exception(f'File {file} not found: {file_err}')
            raise file_err

    return True


def encrypt(
    file: Path,
    recipients: list
        ) -> Path:
    '''
    Decrypt seed phrase and return its value.
        :param file:        The path of the file to be encrypted.
        :param recipients:  The recipient emails of the cipherfile.
    '''
    gpg = GPG(                                                              # Instantiate GPG agent class.
        gpgbinary='/usr/bin/gpg2',
        use_agent=True,
        verbose=False
    )
    outfile = file.with_suffix('')                                          # Strip suffix, if exists.

    log.debug(f'Encrypting file {file.name} to {outfile.name}')

    with open(file, 'rb', encoding='utf-8') as infile:
        try:
            cipherfile = gpg.encrypt_file(                                  # Encrypt the file.
                infile,
                recipients=recipients,
                armor=True,                                                 # Output as ASCII text.
                always_trust=True,
                output=outfile
            )
            log.debug(f'{file.name} encrypted as {cipherfile}.')

        except BaseException as err:
            log.exception('Unhandled exception occured.\nEncryption failed for {file}.')

            raise err

    return outfile


def munge_cipherfile(
    cipherfile: Path
        ) -> NoReturn:
    '''
    Add lines to cipherfile needed for shell interpretation.
        :param cipherfile: The path of the file to be encrypted.
    '''
    newlines = [                                                            # GSHscript cleartext header.
        '#!/usr/bin/env bash\n',
        '# -*- coding:utf-8 -*-\n',
        '# Author:       Casey Sparks\n',
        f'# Date:         {datetime.now().strftime("%B %d, %Y")}\n',
        '\n',
        'gpg2 --decrypt 2> /dev/null << EOF | bash -s $@\n',
        '\n',
    ]

    with open(cipherfile, 'r', encoding='utf-8') as prefile:
        newlines.extend(prefile).readlines()                                # Ciphertext.
        newlines.extend('\nEOF\n')                                          # Heredoc delimiter.

    with open(cipherfile, 'w', encoding='utf-8') as postfile:
        postfile.writelines(newlines)                                       # Write header/ciphertext/footer to file.

    cipherfile.chmod(775)


if __name__ == '__main__':
    args = get_arguments()

    if prechecks_pass(args):
        for clearfile in args.file:
            munge_cipherfile(encrypt(clearfile, args.recipients))
            print(f'{clearfile} encrypted.\nYou may now delete the original, if it still exists.')
