#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author:       Casey Sparks
# Date:         November 24, 2022
# Description:
'''
A script to create PGP-encrypted scripts.
Note that decrypted scripts get passed to a bash subshell, so all
non-POSIX files **must** have a shebang in order to be properly
interpreted by bash.

It is also required that you have $GPG_KEY_ID set in your environment variables.

Requirements:
    * PyGnuPG
'''

from argparse import Namespace, ArgumentParser
from locale import setlocale, LC_ALL
from logging import getLogger, StreamHandler, DEBUG, INFO
from os import getenv, stat, chmod
from pathlib import Path, PosixPath
from psutil import process_iter, NoSuchProcess, AccessDenied, ZombieProcess
from typing import NoReturn
from gnupg import GPG

# Enable logging, set locale, set args.
log = getLogger()

setlocale(LC_ALL, 'en_US.UTF-8')
log.addHandler(StreamHandler())


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(                                    # Instantiate parser.
        description='Create executable PGP-encrypted scripts.'
    )

    parser.add_argument(                                        # Specify recipients.
        '--recipients', '-r',
        dest='recipients',
        nargs='+',
        default=[],
        help='Specify who can decrypt the file.'
    )
    parser.add_argument(                                        # Specify input files.
        '--inputs', '-i',
        dest='file',
        nargs='+',
        help='Specify files to encrypt.'
    )
    parser.add_argument(                                        # Enable DEBUG logging.
        '--verbose', '-v',
        action='store_const',
        dest='loglevel',
        const=DEBUG,
        default=INFO,
        help='Set log level to DEBUG.'
    )

    args = parser.parse_args()

    log.setLevel(args.loglevel)

    return munge_arguments(parser.parse_args())


def munge_arguments(
    args: Namespace
        ) -> Namespace:
    '''
    Resolve inputs to filepaths.
        :param args: User-specified cmdline arguments.
    '''
    args.recipients.append(getenv('GPG_KEY_ID'))                # Add ourselves to the recipients.

    for file in args.file:
        index = args.file.index(file)
        args.file[index] = Path(file).absolute()

    return args


def prechecks_pass(
    args: Namespace
        ) -> bool:
    '''
    Check that inputs and processes are as expected.
        :param args: User-specified cmdline arguments.
    '''
    for gpg_proc in ['gpg-agent', 'gpgconf']:                   # Check that a GPG agent is running.
        for proc in process_iter():
            try:
                if gpg_proc in proc.name():
                    pass

            except (NoSuchProcess, AccessDenied, ZombieProcess) as err:
                log.exception(f'{gpg_proc} not running on host.')
                raise err

    for file in args.file:                                      # Check that the input files exist.
        try:
            file.resolve(strict=True)

        except FileNotFoundError as file_err:
            log.exception(f'File {file} not found: {file_err}')
            raise file_err

    return True


def encrypt(
    file: PosixPath,
    recipients: list
        ) -> PosixPath:
    '''
    Decrypt seed phrase and return its value.
        :param file:        The path of the file to be encrypted.
        :param recipients:  The recipient emails of the cipherfile.
    '''
    outfile = file.with_suffix('')                              # Strip suffix, if exists.

    log.debug(f'Encrypting file: {file}.')

    try:
        cipherfile = gpg.encrypt_file(                          # Encrypt the file.
            open(file, 'rb'),
            recipients=recipients,
            armor=True,                                         # Output as ASCII text.
            always_trust=True,
            output=outfile
        )
        log.debug(f'{file} encrypted as {cipherfile}.')

    except BaseException as err:
        log.exception('Unhandled exception occured.')
        print(f'Encryption failed for {file}.')

        raise err

    return outfile


def munge_cipherfile(
    cipherfile: PosixPath
        ) -> NoReturn:
    '''
    Add lines to cipherfile needed for shell interpretation.
        :param cipherfile: The path of the file to be encrypted.
    '''
    newlines = [                                                # Cleartext header.
        '#!/bin/env bash\n',                                    # Shebang.
        'gpg2 --decrypt 2> /dev/null << EOF | bash -s $@\n',    # Decrypt cipher heredoc and pipe to subshell.
    ]

    newlines.extend(open(cipherfile, 'r').readlines())          # Add ciphertext to header.
    newlines.extend(['EOF'])                                    # Append footer to header+ciphertext.
    chmod(                                                      # Make file executable.
        cipherfile,
        stat(cipherfile).st_mode | 0o111                        # Get the file mode.
    )

    with open(cipherfile, 'w') as file:
        file.writelines(newlines)                               # Write header/ciphertext/footer to file.


if __name__ == '__main__':
    args = get_arguments()
    gpg = GPG(
        gpgbinary='/usr/bin/gpg2',
        use_agent=True,
        verbose=False
    )

    if prechecks_pass(args):
        for clearfile in args.file:
            cipherfile = encrypt(clearfile, args.recipients)
            munge_cipherfile(cipherfile)
            print(
                f'{clearfile} encrypted. '
                'You may now delete the original, if it still exists.'
            )
