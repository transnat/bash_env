#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Date: December 14, 2022
# Description:
'''Check an endpoint and wipe local user data. Should be cron on sensitive systems.'''

__author__ = 'Casey Sparks'

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, Formatter, RootLogger, StreamHandler
from os import getlogin
from pathlib import Path
from shutil import rmtree
from socket import gethostname
from typing import NoReturn
from requests import get


setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                            # Instantiate argument parser.

    parser.add_argument(                                                    # Run in debug mode.
        '--debug',
        dest='debug',
        action='store_true',
        help='Run application in debug mode without performing any action.'
    )
    parser.add_argument(                                                    # Specify logging verbosity.
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `CRITICAL`.'
    )

    arguments = parser.parse_args()                                         # Parse arguments.

    match arguments.log_level:                                              # Set arguments.log_level.
        case 0:
            arguments.log_level = 50                                        # CRITICAL.
        case 1:
            arguments.log_level = 40                                        # ERROR.
        case 2:
            arguments.log_level = 30                                        # WARNING.
        case 3:
            arguments.log_level = 20                                        # INFO
        case 4:
            arguments.log_level = 10                                        # DEBUG.
        case _:
            arguments.log_level = 0                                         # NOTSET.

    return arguments


def enable_log(
    log_level: int = 0
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default NOTSET.
        :return:            Instantiated logger.RootLogger instance.
    '''
    assert isinstance(log_level, int), '`log_level` must be int.'
    assert log_level >= 0, '`log_level` must be >=0.'

    formatter = Formatter(                                                  # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{'
    )
    log_root = getLogger()                                                  # Root logger instance.
    log_console = StreamHandler()                                           # Log to screen.

    log_console.setFormatter(formatter)                                     # Set log stream format.
    log_root.addHandler(log_console)                                        # Log to screen.
    log_root.setLevel(log_level)                                            # User-specified log_level.

    return log_root


def remote_flag() -> bool:
    '''
    Checks remote for hostname match and returns true if true.
        :return:    Boolean for the existence of the remote flag.
    '''
    host_flag = bool(                                                       # Check if flag exists.
        get(
            f'https://raw.githubusercontent.com/caseysparkz/haltandcatchfire/main/{gethostname()}',
            timeout=5
        ).text.lower()
    )

    log.debug(f'Flag: {host_flag}')

    return host_flag


def destroy_user_data(
    debug: bool = True
        ) -> NoReturn:
    '''
    Wipe sensitive user data from disk.
        :param debug:   Run steps without taking any action.
    '''
    dir_list = [                                                            # List of directories to erase.
        Path.home(),
        Path(f'/var/spool/cron/{getlogin()}')
    ]

    log.debug(f'Directory list: {dir_list}')

    for directory in dir_list:
        if debug:                                                           # Log removal ONLY.
            log.debug(f'Simulating removal of {directory}')

        else:
            try:                                                                # Remove data.
                rmtree(directory)
                log.debug(f'Removed {directory}.')

            except (FileNotFoundError, OSError) as exc:
                log.warning(f'Failed to remove {directory}.')

                raise exc


if __name__ == '__main__':
    args = get_arguments()
    log = enable_log(args.log_level)
    flag = any([args.debug, remote_flag()])                                 # Get remote flag or debug mode.

    if flag:
        destroy_user_data(args.debug)
