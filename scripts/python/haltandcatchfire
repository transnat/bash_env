#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Date:         December 14, 2022
# Description:
'''
Check an endpoint and wipe local user data.
Should be cron on sensitive systems.
'''

__author__ = 'Casey Sparks'

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, Formatter, RootLogger, StreamHandler
from os import getlogin
from pathlib import Path
from shutil import rmtree
from socket import gethostname
from typing import NoReturn
from requests import get


setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(                                                # Instantiate argument parser.
        description='The description of the script goes here.'
    )

    parser.add_argument(                                                    # Run in debug mode.
        '--debug',
        dest='debug',
        action='store_true',
        help='Run application in debug mode without performing any action.'
    )
    parser.add_argument(                                                    # Set logging verbosity.
        '--verbose', '-v',
        dest='log_level',
        action='count',
        default=3,
        help='Set log level to DEBUG. Defaults to INFO.'
    )

    arguments = parser.parse_args()                                         # Parse arguments.

    arguments.log_level = max(50 - arguments.log_level * 10, 10)            # Log level should always be <=50,>=10.

    return arguments


def enable_logging(
    log_level: int = 30                                                     # Default INFO.
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level (10-50).
    '''
    formatter = Formatter(                                                  # Log header.
          '{asctime} {threadName:12} {levelname:8}: "{message}"',           # Format style.
          style='{'                                                         # Set f-string style formating.
    )
    handler = StreamHandler()                                               # Logging stream handler.
    logger = getLogger()                                                    # Root logger class.

    handler.setFormatter(formatter)                                         # Set log stream format.
    logger.setLevel(log_level)                                              # User-specified log_level.
    logger.addHandler(handler)                                              # Log to screen.

    return logger


def remote_flag() -> bool:
    '''Checks remote for hostname match and returns true if true.'''
    url = f'https://raw.githubusercontent.com/caseysparkz/haltandcatchfire/main/{gethostname()}'
    host_flag = get(url, timeout=5).text.lower() == 'true'

    log.debug(f'URL: {url}')
    log.debug(f'Flag: {host_flag}')

    return host_flag


def destroy_user_data(
    debug_mode: bool = True
        ) -> NoReturn:
    '''Wipe sensitive user data from disk.'''
    dir_list = [
        Path.home(),
        Path(f'/var/spool/cron/{getlogin()}')
    ]

    log.debug(f'Directory list: {dir_list}')

    for directory in dir_list:
        if debug_mode:                                                      # Log removal ONLY.
            log.debug(f'Simulating removal of {directory}')
            continue

        try:                                                                # Remove data.
            rmtree(directory)
            log.debug(f'Removed {directory}.')

        except BaseException:
            log.warning(f'Failed to remove {directory}.')


if __name__ == '__main__':
    args = get_arguments()
    log = enable_logging(args.log_level)
    FLAG = any([args.debug, remote_flag()])                                 # Get remote flag or debug mode.

    if FLAG:
        destroy_user_data(args.debug)
