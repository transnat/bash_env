#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author:       Casey Sparks
# Date:         February 09, 2022.
# Description:
'''Display information about a network interface.'''

from argparse import ArgumentParser, Namespace
from fcntl import fcntl
from locale import setlocale, LC_ALL
from socket import inet_ntoa, socket, SOCK_DGRAM, AF_INET
from struct import pack
from logging import getLogger, StreamHandler, DEBUG
from requests import get

setlocale(LC_ALL, 'en_US.UTF-8')

log = getLogger()
log.addHandler(StreamHandler())
log.setLevel(DEBUG)


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(
        description='Display information about a network interface.'
    )

    parser.add_argument(
        '--interface', '-i',
        dest='interface',
        default=wan_interface()[0],
        help='Specify the network interface.'
    )

    return parser.parse_args()


def public_ip() -> str:
    '''Get our public IP address.'''
    return get('https://ipinfo.io/ip').text


def wan_interface() -> str:
    '''Read the default gateway directly from /proc.'''
    with open('/proc/net/route') as fh:
        for line in fh:
            fields = line.strip().split()
            if fields[1] == '00000000':
                return fields[0], inet_ntoa(pack('<L', int(fields[2], 16)))


def interface_info(
    interface: str
        ) -> list:
    '''
    Get the default gateway.
        :param interface: The network interface to query.
    '''
    with open('/proc/net/route') as fh:
        for line in fh:
            fields = line.strip().split()
            if fields[0] == interface and fields[7] != '00000000':
                return fields


def local_ip(
    interface: str
        ) -> str:
    '''
    Get the local IP address of an interface.
        :param interface: The network interface to query.
    '''
    file_descriptor = socket(                                               # Get file descriptor.
        AF_INET, SOCK_DGRAM
    ).fileno()
    inet_socket = inet_ntoa(
        fcntl(
            file_descriptor,
            0x8915,                                                         # SIOCGIFADDR
            pack('256s', bytes(interface, 'utf-8'))
        )[20:24]
    )

    return inet_socket


def netmask(
    interface: str
        ) -> str:
    '''
    Read the default gateway directly from /proc.
        :param interface: The network interface to query.
    '''
    return inet_ntoa(pack('<L', int(interface_info(interface)[7], 16)))


if __name__ == '__main__':
    args = get_arguments()
    interface = get_arguments().interface                                   # Get interface from arguments.
    network_table = [                                                       # Instantiate netinfo array.
        ['Network Information', ''],
        ['============================', ''],
        ['Public IP:', public_ip()],
        ['Local IP:', local_ip(interface)],
        ['Netmask:', netmask(args.interface)],
        ['Gateway:', wan_interface()[1]],
        ['Interface:', args.interface]
    ]

    for row in network_table:                                               # Print formatted array.
        print('{: <12} {: >15}'.format(*row))
