#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author:       Casey Sparks
# Date:         August 09, 2022
# Description:
'''
Convert structured data between INI, HTML, JSON, YAML, XML.

Requirements:
    * dict2xml
    * pyjson
    * pyyaml
    * xmltodict
'''

from argparse import ArgumentParser, Namespace
from configparser import ConfigParser
from dict2xml import dict2xml
from json import dumps as jdumps, load
from locale import setlocale, LC_ALL
from logging import getLogger, DEBUG, INFO
from pathlib import Path
from sys import exit, stdout
from typing import NoReturn
from xmltodict import parse
from yaml import safe_load, dump as ydump


setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.

log = getLogger()                                                           # Log to screen.


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(                                                # Instantiate argument parser.
        description='Convert structured data between JSON and YAML.'
    )
    parser.add_argument(                                                    # Read data from file.
        '-i', '--infile',
        dest='infile',
        type=Path,
        help='File to read from.'
    )
    parser.add_argument(                                                    # Output data to file.
        '-f', '--format',
        dest='format',
        choices=['ini', 'json', 'xml', 'yaml'],
        default='yaml',
        type=str,
        help='Data format to output.'
    )
    parser.add_argument(                                                    # Output data to file.
        '-w', '--write',
        dest='write',
        action='store_true',
        help='Write file to disk instead of stdout.'
    )
    parser.add_argument(                                                    # Enable DEBUG logging.
        '-v', '--verbose',
        action='store_const',
        dest='loglevel',
        const=DEBUG,
        default=INFO,
        help='Set log level to DEBUG.'
    )

    args = parser.parse_args()

    log.setLevel(args.loglevel)                                             # User-specified loglevel.
    log.debug('Debug logging enabled.')

    return args


def ingest_data(
    infile: Path
        ) -> dict:
    '''
    Ingests a YAML or JSON object from a file or STDIN.
        :param args:    User-specified commandline arguments.
    '''
    log.debug(f'Reading from file: {infile.name}')

    file_suffix = infile.suffix

    match file_suffix:
        case '.json':                                                       # JSON.
            payload = load(open(infile, 'r'))

        case '.ini':                                                        # INI.
            config = ConfigParser()

            config.read(infile)

            payload = config._sections

        case '.html' | '.xml':                                              # HTML/XML.
            payload = parse(open(infile).read())

        case '.yaml' | '.yml':                                              # Default to YAML.
            payload = safe_load(open(infile, 'r'))

        case _:
            print('Unsupported filetype. Please check the extension and try again.')
            exit(1)

    log.debug(
        f'Input: {infile}\n',
        f'Input filetype: {file_suffix.upper().replace(".", "")}\n\n',
        payload
    )

    return payload


def output_data(
    args: Namespace,
    payload: dict
        ) -> NoReturn:
    '''
    Formats and outputs a data object as JSON or YAML to a file or STDOUT.
        :param args:        User-specified commandline arguments.
        :param payload:     The Python dict to format and output.
    '''
    outfile = open(                                                         # Write to file or stdout.
        args.infile.with_suffix(f'.{args.format}'), 'w'
    ) if args.write else stdout

    log.debug(f'Writing {args.format.upper()} output to {outfile.name}.')

    match args.format.lower():
        case 'ini':                                                         # INI.
            config = ConfigParser()                                         # Instantiate parser.
            nested_keys = False                                             # Validity checker.

            for key in payload.keys():
                if iter(key):                                               # Check if keys are invalid types.
                    nested_keys = True                                      # Mark invalid.

            if nested_keys:                                                 # Warn the user.
                log.warning(
                    'Warning! INI does not support nested values.\n'
                    'Values will be flattened to strings.'
                )

                if input(                                                   # ACK and continue.
                    'Proceed? [y/N] '
                ).lower().startswith('y'):
                    pass
                else:                                                       # ACK and exit.
                    exit(1)

            config._sections = payload
            config.write(outfile)

        case 'json':                                                        # JSON.
            outfile.write(jdumps(
                payload,
                indent=2
            ))

        case 'html' | 'xml':                                                # XML.
            outfile.write(dict2xml(payload))

        case _:                                                             # Default to YAML.
            outfile.write(ydump(payload))


if __name__ == '__main__':
    args = get_arguments()
    payload = ingest_data(args.infile)

    output_data(args, payload)
