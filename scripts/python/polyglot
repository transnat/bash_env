#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Date:         August 09, 2022
# Description:
'''Convert structured data between HTML, INI, JSON, XML, and YAML.'''

__author__ = 'Casey Sparks'
__requires__ = [
    'dict2xml>=1.7.2,<2.0.0',
    'pyyaml>=6.0.0,<7.0.0',
    'xmltodict>=0.13.0,<1.0.0'
]

from argparse import ArgumentParser, Namespace
from configparser import ConfigParser
from io import TextIOWrapper
from json import dumps as jdumps, load
from locale import setlocale, LC_ALL
from logging import getLogger, Formatter, RootLogger, StreamHandler
from pathlib import Path
from sys import exit as sys_exit, stdout
from typing import NoReturn, Union
from dict2xml import dict2xml
from xmltodict import parse
from yaml import safe_load, dump as ydump


setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.
SUPPORTED_TYPES = ['ini', 'json', 'xml', 'yaml']                            # Supported outfile types.


def get_arguments() -> Namespace:
    '''
    Get cmdline arguments.
        :return:    argparse.Namespace instance of user arguments.
    '''
    parser = ArgumentParser(description=__doc__)                            # Instantiate argument parser.

    parser.add_argument(                                                    # Read data from file.
        '--infile', '-i',
        dest='infile',
        type=Path,
        help='File to read from.'
    )
    parser.add_argument(                                                    # Specify an output format.
        '--output-format', '-o',
        dest='format',
        choices=SUPPORTED_TYPES,
        default='yaml',
        type=str,
        help='Data format to output.'
    )
    parser.add_argument(                                                    # Output data to file.
        '--write', '-w',
        dest='write',
        action='store_true',
        help='Write file to disk instead of stdout.'
    )
    parser.add_argument(                                                    # Specify logging verbosity.
        '--verbose', '-v',
        dest='log_level',
        default=0,
        action='count',
        help='Specify logging verbosity. Default `CRITICAL`.'
    )

    arguments = parser.parse_args()                                         # Parse arguments.

    match arguments.log_level:                                              # Set arguments.log_level.
        case 0:
            arguments.log_level = 50                                        # CRITICAL.
        case 1:
            arguments.log_level = 40                                        # ERROR.
        case 2:
            arguments.log_level = 30                                        # WARNING.
        case 3:
            arguments.log_level = 20                                        # INFO
        case 4:
            arguments.log_level = 10                                        # DEBUG.
        case _:
            arguments.log_level = 0                                         # NOTSET.

    return arguments


def enable_log(
    log_level: int = 0
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level. Default NOTSET.
        :return:            Instantiated logger.RootLogger instance.
    '''
    assert isinstance(log_level, int), '`log_level` must be int.'
    assert log_level >= 0, '`log_level` must be >=0.'

    formatter = Formatter(                                                  # Log message header format.
        '{asctime} {threadName:12} {levelname:8}: "{message}"',
        style='{'
    )
    log_root = getLogger()                                                  # Root logger instance.
    log_console = StreamHandler()                                           # Log to screen.

    log_console.setFormatter(formatter)                                     # Set log stream format.
    log_root.addHandler(log_console)                                        # Log to screen.
    log_root.setLevel(log_level)                                            # User-specified log_level.

    return log_root


def ingest_data(
    infile: Path
        ) -> dict:
    '''
    Ingests a YAML or JSON object from a file or STDIN.
        :param infile:  The file to ingest data from.
        :return:        Dictionary containing parsed data.
    '''
    with open(infile, 'r', encoding='utf-8') as data:                       # Open file handler.
        log.debug(f'Reading from file: {infile.name}')

        match infile.suffix.lower():
            case '.json':                                                   # JSON
                payload = load(data)

            case '.ini':                                                    # INI
                config = ConfigParser()

                config.read(infile)

                payload = config._sections

            case '.html' | '.xml':                                          # HTML/XML
                payload = parse(data.read())

            case '.yaml' | '.yml':                                          # YAML (default)
                payload = safe_load(data)

            case _:
                print('Unsupported filetype. Please check the extension and try again.')
                sys_exit(1)

        log.debug(f'Input: {infile}\n', f'Input filetype: {infile.suffix.upper().replace(".", "")}\n\n', payload)

    return payload


def output_data(
    payload: dict,
    infile: Path,
    out_format: Union[SUPPORTED_TYPES] = 'yaml',
    write: bool = False
        ) -> NoReturn:
    '''
    Formats and outputs a data object as JSON or YAML to a file or STDOUT.
        :param payload:     The Python dict to format and output.
        :param infile:      Path of the input file.
        :param out_format:  Output format of the data.
        :param write:       Boolean specifying whether data should be written to a file.
    '''
    def _write_out(
        payload: dict,
        out_format: str,
        outfile: TextIOWrapper = stdout
            ) -> NoReturn:
        '''
        Write data to a TextIOWrapper.
            :param payload:     The Python dict to format and output.
            :param out_format:  Output format of the data.
            :param outfile:     TextIOWrapper to write data to. Either an open filehandle, or stdout.
        '''
        log.debug(f'Writing {out_format.upper()} output to {outfile.name}.')

        match out_format.lower():
            case 'html' | 'xml':                                            # HTML/XML.
                outfile.write(dict2xml(payload))

            case 'ini':                                                     # INI.
                config = ConfigParser()                                     # Instantiate parser.
                config._sections = payload                                  # Write to class.

                for key in payload.keys():
                    if iter(key):                                           # Keys are nested.
                        log.warning('Warning! INI does not support nested values. Values will be flattened to strings.')

                        if input('Proceed? [y/N] ').lower().startswith('y'):
                            config.write(outfile)

                        sys_exit(1)

            case 'json':                                                    # JSON.
                outfile.write(jdumps(payload, indent=2))

            case _:                                                         # YAML (default).
                outfile.write(ydump(payload))

    if write:                                                               # Write to file.
        with open(infile.with_suffix(f'.{out_format}'), 'w', encoding='utf-8') as outfile:
            _write_out(payload, out_format, outfile)
    else:                                                                   # Write to stdout.
        _write_out(payload, out_format, stdout)


if __name__ == '__main__':
    args = get_arguments()
    log = enable_log(args.log_level)

    output_data(
        ingest_data(args.infile),
        args.infile,
        args.format,
        args.write
    )
