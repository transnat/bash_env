#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Date:         January 25, 2022
# Description:
'''whois for IP physical locations.'''

__author__ = 'Casey Sparks'

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, StreamHandler, DEBUG, INFO
from os import getenv
from sys import exit as sys_exit
from typing import NoReturn
from requests import get

# Enable logging, set locale, set args.
log = getLogger()

setlocale(LC_ALL, 'en_US.UTF-8')
log.addHandler(StreamHandler())


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(                                                # Instantiate argument parser.
        description='whois for physical IP locations.'
    )
    parser.add_argument(                                                    # Specify an IPstack API key.
        'ip_addresses',
        dest='ip_addresses',
        type=list,
        help='List of IP addresses to retrieve.'
    )
    parser.add_argument(                                                    # Specify an IPstack API key.
        '-k', '--api_key',
        dest='api_key',
        default=getenv('IPSTACK_API_KEY'),
        type=str,
        help='API key for ipstack.com.'
    )
    parser.add_argument(                                                    # Enable DEBUG logging.
        '-v', '--verbose',
        action='store_const',
        dest='loglevel',
        const=DEBUG,
        default=INFO,
        help='Set log level to DEBUG.'
    )

    arguments = parser.parse_args()

    log.setLevel(arguments.loglevel)

    return arguments


def get_location_table(
    api_key: str,
    ip_address: str
        ) -> list:
    '''
    Gets location data from IPStack.com and returns it as a list of lists.
        :param api_key:     The IPStack API key for the request.
        :param ip_address:  The IP address to get location info for.
    '''
    if api_key is None:
        log.critical('No API key.')

        sys_exit(1)

    else:
        ip_info = get(
            f'http://api.ipstack.com/{ip_address}',
            params={'access_key': api_key},
            timeout=2
        ).json()

        location_table = [
            ['IP:', ip_info["ip"]],
            ['City:', ip_info["city"]],
            ['Region:', ip_info["region_name"]],
            ['ZIP:', ip_info["zip"]],
            ['Country:', ip_info["country_name"]],
            ['Coordinates:', f'{ip_info["latitude"]}, {ip_info["longitude"]}']
        ]

    return location_table


def fprint(
    location_table: list
        ) -> NoReturn:
    '''
    Formats and prints a list of lists as a table.
        :param table: The location to format/print.
    '''
    for row in location_table:
        print('{: <16} {: >0}'.format(*row))


if __name__ == '__main__':
    args = get_arguments()

    for ip in args.ip_addresses:
        fprint(get_location_table(
            getenv('IPSTACK_API_KEY'),
            ip
        ))
