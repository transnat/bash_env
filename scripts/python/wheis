#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Date:         January 25, 2022
# Description:
'''whois for IP physical locations.'''

__author__ = 'Casey Sparks'

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, Formatter, RootLogger, StreamHandler
from os import getenv
from requests import get

# Enable logging, set locale, set args.
log = getLogger()

setlocale(LC_ALL, 'en_US.UTF-8')
log.addHandler(StreamHandler())


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(                                                # Instantiate argument parser.
        description='whois for physical IP locations.'
    )
    parser.add_argument(                                                    # Specify an IPstack API key.
        'ip_addresses',
        type=str,
        nargs='+',
        help='List of IP addresses to retrieve.'
    )
    parser.add_argument(                                                    # Specify an IPstack API key.
        '-k', '--api_key',
        dest='api_key',
        default=getenv('IPSTACK_API_KEY'),
        type=str,
        help='API key for ipstack.com.'
    )
    parser.add_argument(                                                    # Enable DEBUG logging.
        '-v', '--verbose',
        action='count',
        dest='log_level',
        default=0,
        help='Set log level (default CRIT).'
    )

    arguments = parser.parse_args()

    arguments.log_level = max(50 - arguments.log_level * 10, 10)


    return arguments


def enable_logging(
    log_level: int = 30,                                                    # Default INFO.
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level (10-50).
    '''
    formatter = Formatter(                                                  # Log header.
          '{asctime} {threadName:12} {levelname:8}: "{message}"',           # Format style.
          style='{'                                                         # Set f-string style formating.
    )
    handler = StreamHandler()                                               # Logging stream handler.
    logger = getLogger()                                                    # Root logger class.

    handler.setFormatter(formatter)                                         # Set log stream format.
    logger.setLevel(log_level)                                              # User-specified log_level.
    logger.addHandler(handler)                                              # Log to screen.

    return logger


def get_location_table(
    api_key: str,
    ip_address: str
        ) -> list:
    '''
    Gets location data from IPStack.com and returns it as a list of lists.
        :param api_key:     The IPStack API key for the request.
        :param ip_address:  The IP address to get location info for.
    '''
    ip_info = get(
        f'http://api.ipstack.com/{ip_address}',
        params={'access_key': api_key},
        timeout=2
    ).json()

    if ip_info['success'] is False:
        log.critical(f"API error: {ip_info['error']['type']}")

    try:
        table = [
            ['IP:', ip_info["ip"]],
            ['City:', ip_info["city"]],
            ['Region:', ip_info["region_name"]],
            ['ZIP:', ip_info["zip"]],
            ['Country:', ip_info["country_name"]],
            ['Coordinates:', f'{ip_info["latitude"]}, {ip_info["longitude"]}']
        ]

    except KeyError as err:
        raise err

    return table


if __name__ == '__main__':
    args = get_arguments()

    for ip in args.ip_addresses:
        for row in get_location_table(getenv('IPSTACK_API_KEY'), ip):
            print(f'{row[0]: <16} {row[1]: >0}')
