#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Date:         February 08, 2023
# Description:
'''Generate a connection QR code for a wifi SSID.'''

__author__ = 'Casey Sparks'

from argparse import ArgumentParser, Namespace
from locale import setlocale, LC_ALL
from logging import getLogger, StreamHandler, Formatter, RootLogger
from pathlib import Path
from typing import NoReturn, Optional
from qrcode import QRCode

setlocale(LC_ALL, 'en_US.UTF-8')                                            # Set locale.


def get_arguments() -> Namespace:
    '''Get cmdline arguments.'''
    parser = ArgumentParser(                                                # Instantiate argument parser.
        description='Generate a QR code to join a wifi network.'
    )
    mutex_group = parser.add_mutually_exclusive_group()

    parser.add_argument(                                                    # SSID of the wifi network.
        'ssid',
        type=str,
        help='SSID of the wifi network.'
    )
    parser.add_argument(                                                    # Password of the wifi network.
        'passwd',
        type=str,
        help='Password of the wifi network (pass an empty string for no password).'
    )
    parser.add_argument(                                                    # Encryption of the wifi network.
        '--encryption', '-e',
        dest='encryption',
        type=str,
        default='WPA',
        choices=['WPA', 'WEP'],
        help='Encryption used by the SSID (default WPA).'
    )
    parser.add_argument(                                                    # Enable DEBUG logging.
        '--verbose', '-v',
        dest='log_level',
        action='count',
        default=0,                                                          # Default CRITICAL.
        help='Set log level (default INFO).'
    )
    mutex_group.add_argument(                                               # Output connection string.
        '--string-only',
        dest='string',
        action='store_true',
        help='Output the QR wifi connection string and exit.'
    )
    mutex_group.add_argument(                                               # Output file.
        '--output', '-o',
        dest='output',
        type=Path,
        help='Path to write the resultant PNG.'
    )

    arguments = parser.parse_args()                                         # Parse arguments.
    log_level = 50 - arguments.log_level * 10                               # Set log numeric value from -vvv arguments.
    arguments.log_level = log_level if log_level >= 10 else 10              # Log level should be <= 10.

    return arguments

def enable_logging(
    log_level: int = 30                                                     # Default INFO.
        ) -> RootLogger:
    '''
    Enable logging and handle outputs.
        :param log_level:   User-specified log level (10-50).
    '''
    formatter = Formatter(                                                  # Log header.
          '{asctime} {threadName:12} {levelname:8}: "{message}"',           # Format style.
          style='{'                                                         # Set f-string style formating.
    )
    stream_handler = StreamHandler()                                        # Logging stream handler.
    logger = getLogger()                                                    # Root logger class.

    stream_handler.setFormatter(formatter)                                  # Set log stream format.
    logger.setLevel(log_level)                                              # User-specified log_level.
    logger.addHandler(stream_handler)                                       # Log to screen.

    return logger


def generate_qr(
    qr_string: str,
    output: Optional[str] = None
        ) -> NoReturn:
    '''
    Generate a QR and print to stdout or a PNG.
        :param qr_string:   User-provided commandline arguments.
        :param output:      Optional path to output the resultant PNG.
    '''
    log.debug(f'Connection string: {qr_string}')
    qr.add_data(qr_string)                                                  # Add data to the QR class.
    qr.make()                                                               # Generate the QR code.
    log.debug('QR code created.')

    if output:
        img = qr.make_image(                                                # Create PNG.
            fill_color="black",
            back_color="white"
        )

        log.debug(qr.print_tty())
        img.save(output)                                                    # Save PNG to disk.

    else:
        qr.print_tty()                                                      # Print to screen.


if __name__ == '__main__':
    args = get_arguments()                                                  # Get cmdline arguments.
    log = enable_logging(args.log_level)                                    # Enable logging.
    qr = QRCode()                                                           # Instantiate QR class.
    connection_string = f'WIFI:T:{args.encryption};S:{args.ssid};P:{args.passwd};;'

    log.debug(f'Arguments: {args}')

    if args.string:                                                         # Only print the string to stdout.
        print(connection_string)

    else:                                                                   # Generate a QR code.
        generate_qr(connection_string, args.output)
